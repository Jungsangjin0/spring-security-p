<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:s="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">


<context:component-scan base-package="com.design.bandi"/>

<s:http pattern="/resources/**" security="none"/>
<s:http auto-config="true" use-expressions="true">

		<!-- <s:csrf disabled="true"/>  -->
		
		<s:intercept-url pattern="/login" access="isAnonymous()" />
		<s:intercept-url pattern="/register" access="isAnonymous()" />
		<s:intercept-url pattern="/join" access="isAnonymous()" />
		
		<!-- 정적 리소스는 모두 접근 허용 -->
		<!-- 로그인된 상태에서는 로그인이나 회원가입 화면에 접근 못하도록 함 -->
		<!-- 관리자페이지는 관리자만 접근 허용 -->
		<s:intercept-url pattern="/admin/**" access="hasRole('ADMIN')" />
		<s:intercept-url pattern="/creator/**" access="hasAnyRole('ADMIN', 'CREATOR')" />
		<s:intercept-url pattern="/user/**" access="hasAnyRole('ADMIN', 'CREATOR', 'USER')" />
		
		<!-- 로그인 설정 -->
		
		
		
		
		<s:form-login	
			username-parameter="userId" 
			password-parameter="userPw"
			login-processing-url="/login_check" 
			login-page="/login" 
			default-target-url="/"
			authentication-failure-forward-url="/login?error=true"
			/>
			<!-- authentication-failure-handler-ref="userLoginFailHandler"
			authentication-success-handler-ref="userLoginSuccessHandler"  -->
			
			
			
			
		<!-- 로그아웃 설정 -->
		<s:logout 
			logout-url="/logout"
			logout-success-url="/"
			invalidate-session="true"
			delete-cookies="true" />
			
	<!-- 권한이 없어서 금지된 URI 접속할 때 보여줄 페이지(403 에러 페이지 대체) -->
	<s:access-denied-handler error-page="/denied" />
	
		

		
	</s:http>



	<!-- DB 연동 설정 -->
	<s:authentication-manager>
		<!-- <s:authentication-provider user-service-ref="userLoginService"> -->
		<!-- </s:authentication-provider> -->
	<!-- 	<s:authentication-provider ref="userLoginAuthenticationProvider">
		</s:authentication-provider> -->
		<!-- <s:authentication-provider user-service-ref="customJdbcDaoImpl">
		</s:authentication-provider> -->
		<s:authentication-provider>
			<s:user-service>
				<s:user name="admin" password="{noop}1234" authorities="ROLE_ADMIN"/>
				<s:user name="user" password="{noop}1234" authorities="ROLE_USER"/>
				<s:user name="creator" password="{noop}1234" authorities="ROLE_CREATOR"/>
			</s:user-service>
		</s:authentication-provider>
		
	</s:authentication-manager>
	
	
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<!-- <bean id="customJdbcDaoImpl" class="com.js.e.CustomJdbcDaoImpl">
		<property name="dataSource" ref="dataSource2"/>
		<property name="rolePrefix" value=""/>
		<property name="usersByUsernameQuery" value="SELECT ID, PASSWORD FROM MEMBER WHERE ID = ?"/>
		<property name="authoritiesByUsernameQuery" value="SELECT ROLE FROM MEMBER WHERE ID = ?"/>
		<property name="enableGroups" value="false"/>
	</bean> -->
	
	
</beans>